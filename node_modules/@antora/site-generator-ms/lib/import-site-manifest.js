'use strict'

const readSiteManifest = require('./read-site-manifest')

async function importSiteManifest (
  playbook,
  contentCatalog,
  asciidocConfig,
  primarySiteManifestUrl,
  primarySiteUrl,
  parseResourceId
) {
  if (!primarySiteManifestUrl) primarySiteManifestUrl = primarySiteUrl + '/site-manifest.json'
  const { components, url: siteUrlFromManifest } = await readSiteManifest(playbook, primarySiteManifestUrl)
  if (!components) return
  if (!primarySiteUrl) primarySiteUrl = siteUrlFromManifest
  Object.assign(asciidocConfig.attributes, {
    'primary-site-url': primarySiteUrl,
    'primary-site-manifest-url': primarySiteManifestUrl,
  })
  const primarySite = { url: primarySiteUrl }
  components.forEach(({ name, title, versions }) => {
    const localComponent = contentCatalog.getComponent(name)
    versions.forEach(({ displayVersion, pages, version, url: startUrl }) => {
      let componentVersion = localComponent && contentCatalog.getComponentVersion(localComponent, version)
      if (!componentVersion) {
        const componentVersionDesc = { asciidoc: asciidocConfig, displayVersion, title }
        componentVersion = contentCatalog.registerComponentVersion(name, version, componentVersionDesc)
        componentVersion.site = primarySite
        componentVersion.url = primarySiteUrl + startUrl
      } else if (componentVersion.name === 'home') {
        componentVersion.hybrid = true
      } else {
        // NOTE don't import component version if already in this site (unless component is home)
        return
      }
      pages.forEach(({ module: module_ = 'ROOT', path, title: doctitle, url }) => {
        const pageId = { component: name, version, module: module_, relative: path, family: 'page' }
        // NOTE don't overwrite page if it's in the current site
        if (componentVersion.hybrid && contentCatalog.getById(pageId)) return
        contentCatalog.addFile({
          asciidoc: { xreftext: doctitle },
          site: primarySite,
          out: undefined,
          pub: { url: primarySiteUrl + url },
          src: pageId,
        })
      })
    })
    if (!localComponent) contentCatalog.getComponent(name).site = primarySite
  })
  // NOTE ignore alias for a location in the primary site
  override(
    contentCatalog,
    'registerPageAlias',
    (super_) =>
      function (spec, rel) {
        const src = parseResourceId(spec, rel.src, 'page', ['page'])
        if (!src) return
        const component = this.getComponent(src.component)
        if (component) {
          const componentVersion = this.getComponentVersion(component, src.version || component.latest.version)
          if (componentVersion) {
            if (componentVersion.site) return
            if (componentVersion.hybrid && (this.getById(src) || {}).site) {
              let $files = Symbol('files')
              $files = Object.getOwnPropertySymbols(this).find(($candidate) => String($candidate) === String($files))
              ;(this[$files].get(src.family) || new Map()).delete(generateFileKey(src))
            }
          }
        }
        return super_.apply(this, arguments)
      }
  )
}

function generateFileKey ({ component, version, module: module_, family, relative }) {
  return `${version}@${component}:${module_}:${family}$${relative}`
}

function override (object, methodName, cb) {
  object[methodName] = cb(object[methodName])
}

module.exports = importSiteManifest
