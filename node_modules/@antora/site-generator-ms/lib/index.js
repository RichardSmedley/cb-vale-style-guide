'use strict'

const exportSiteManifest = require('./export-site-manifest')
const exportSiteNavigationData = require('./export-site-navigation-data')
const importSiteManifest = require('./import-site-manifest')

module.exports.register = function () {
  this.on('beforeProcess', ({ siteAsciiDocConfig: { attributes: siteAsciiDocAttrs } }) => {
    const primarySiteManifestUrl = siteAsciiDocAttrs['primary-site-manifest-url']
    const primarySiteUrl = siteAsciiDocAttrs['primary-site-url']
    if (primarySiteManifestUrl || primarySiteUrl) {
      this.on('contentClassified', ({ playbook, contentCatalog, siteAsciiDocConfig }) =>
        importSiteManifest(
          playbook,
          contentCatalog,
          siteAsciiDocConfig,
          primarySiteManifestUrl,
          primarySiteUrl,
          this.require('@antora/content-classifier/lib/util/parse-resource-id')
        )
      )
    }
  })
  this.on('beforePublish', ({ playbook, siteAsciiDocConfig, contentCatalog, siteCatalog }) => {
    const {
      'site-component-order': siteComponentOrder,
      'site-manifest-path': siteManifestPath,
      'site-navigation-data-path': siteNavigationDataPath,
    } = siteAsciiDocConfig.attributes
    const localComponents = contentCatalog.getComponents().filter(({ site }) => !site)
    const pages = contentCatalog.getPages((page) => page.out)
    const aliases = contentCatalog.findBy({ family: 'alias' })
    siteCatalog.addFile(exportSiteManifest(localComponents, pages, aliases, playbook.site.url, siteManifestPath))
    if (siteNavigationDataPath || 'export-site-navigation-data' in siteAsciiDocConfig.attributes) {
      siteCatalog.addFile(exportSiteNavigationData(localComponents, siteComponentOrder, siteNavigationDataPath))
    }
  })
}
